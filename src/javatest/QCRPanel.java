/*
 * QCRPanel.java
 *
 * Created on 25 f√©vrier 2008, 14:09
 */

package javatest;

import java.io.File;
import java.awt.*;
import java.awt.event.*;
import javax.swing.event.*;
import javax.swing.*;

import java.awt.image.BufferedImage;
import javax.imageio.ImageIO; // save JPanel as an image
import java.io.IOException;

import javax.swing.filechooser.*;



/**
 *
 * @author  Romain Fenouil
 */
public class QCRPanel extends javax.swing.JPanel implements ListSelectionListener, MouseListener, MouseMotionListener, ActionListener
{
    
    public QCRPanel()
    {
        this(new String("C://Temp//TwoColor//output"));
    }
    /** Creates new form QCRPanel */
    public QCRPanel(final String fileDirectory) 
    {
        initComponents();
        jEditorPane1.setContentType("text/html");
        jEditorPane1.setBorder(null);
        
        //jEditorPane1.setText("Hi");
        //jEditorPane1.setText("<HTML><u><a href=\"file:///"+fileDirectory+"//QCreport.pdf\">file:///"+fileDirectory+"//QCreport.pdf</a></u></HTML>");
        jEditorPane1.setText("<HTML><u><a href=\""+fileDirectory.replace("/", "\\")+"QCreport.pdf\">"+fileDirectory.replace("/", "\\")+"QCreport.pdf</a></u></HTML>");
        
        //jEditorPane1.setText("<HTML><u><a href=\"http://www.google.com\">Report</a></u></HTML>");
        class MyHyperlinkListener implements HyperlinkListener {
        public void hyperlinkUpdate(HyperlinkEvent evt) {
            if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                try {
    			        String osName = System.getProperty("os.name").toLowerCase();
	        	        Runtime rt = Runtime.getRuntime();
				if (osName.indexOf( "win" ) >= 0) {
		        	    System.out.println("rundll32 url.dll,FileProtocolHandler " + fileDirectory.replace("/", "\\")+"QCreport.pdf");
		                    
                                    rt.exec( "rundll32 url.dll,FileProtocolHandler " + fileDirectory.replace("/", "\\")+"QCreport.pdf");
                                        }
                                else if (osName.indexOf("mac") >= 0) {
		                        rt.exec( "open " + fileDirectory+"QCreport.pdf");
				}
		        
		                else if (osName.indexOf("ix") >=0 || osName.indexOf("ux") >=0 || osName.indexOf("sun") >=0) {
		        	        String[] browsers = {"epiphany", "firefox", "mozilla", "konqueror",
		        			"netscape","opera","links","lynx"};
 
		        	        // Build a command string which looks like "browser1 "url" || browser2 "url" ||..."
		        	        StringBuffer cmd = new StringBuffer();
		        	        for (int i = 0 ; i < browsers.length ; i++)
		        		        cmd.append((i == 0  ? "" : " || " ) + browsers[i] +" \"" + "file:///"+fileDirectory+"//QCreport.pdf" + "\" ");
 
		        	        rt.exec(new String[] { "sh", "-c", cmd.toString() });
		                }
			}
			catch (Exception ex)
			{
				ex.printStackTrace();
			}
    	        
            }
        }
         }
        jEditorPane1.addHyperlinkListener(new MyHyperlinkListener());
        
        m_fileDirectory=fileDirectory;
        
        File rep=new File(m_fileDirectory);
        String[] fileList=rep.list();
        
        jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listModel=new DefaultListModel();
        for(int i=0;i<fileList.length;i++)
        {
            if(fileList[i].endsWith("png"))
            {
                listModel.addElement(fileList[i].substring(0,fileList[i].length()-4));
                
            }
        }
        jList1.setModel(listModel);
        
        jList1.addListSelectionListener(this);
        
        jList1.setSelectedIndex(0);
       
        imageCanvas.addMouseListener(this);
        imageCanvas.addMouseMotionListener(this);
        jScrollPane1.setViewportView(imageCanvas);
        
        jButtonSave.addActionListener(this);

        //canvasLocation=new Point(0,0);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButtonSave = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        jScrollPane1.setMaximumSize(new java.awt.Dimension(400, 400));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 400));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 400));

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jButtonSave.setText("Save Graph"); // NOI18N

        jScrollPane3.setBorder(null);

        jEditorPane1.setBackground(java.awt.SystemColor.control);
        jEditorPane1.setBorder(null);
        jEditorPane1.setEditable(false);
        jScrollPane3.setViewportView(jEditorPane1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(33, 33, 33)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(44, 44, 44)
                                .add(jButtonSave)
                                .addContainerGap(60, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 157, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(29, 29, 29))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 182, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonSave))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(26, 26, 26)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private String m_fileDirectory;
    
    private DefaultListModel listModel;
    private ImageCanvas imageCanvas;
    
    private Object oldItem;
    //private Point canvasLocation;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
    
    public void actionPerformed(ActionEvent e)
    {
        if(e.getSource().equals(jButtonSave))
        {
            JFileChooser fenetreMenu = new JFileChooser();
	    
	    //fenetreMenu.setFileFilter(new FileNameExtensionFilter("jpeg image",new String[]{"jpg"}));
            fenetreMenu.setFileFilter(new JpgFilter());
	    int resultat = fenetreMenu.showSaveDialog(this);
	    if (resultat == JFileChooser.APPROVE_OPTION)
            {
                File fileName;
                if(!fenetreMenu.getSelectedFile().toString().toLowerCase().endsWith(".jpg"))
                {
                    fileName=new File(fenetreMenu.getSelectedFile().toString()+".jpg");
                }
                else
                {
                    fileName=fenetreMenu.getSelectedFile();
                }
                
                System.out.println("Saving Graph");
                BufferedImage image = new BufferedImage( 1024, 1024, BufferedImage.TYPE_INT_RGB); 
                imageCanvas.save(image.getGraphics()); 
                try
                {
                    ImageIO.write(image, "JPG", fileName);
                }
                catch (IOException ioe) { ioe.printStackTrace(); }
            }    
        }
        
    }
    
    public void valueChanged(ListSelectionEvent e) 
    {
        javax.swing.JList list = (javax.swing.JList)e.getSource();
    
        // Get the new item
        Object newItem = list.getSelectedValue();
    
        // Determine if different from previously selected item
        boolean same = newItem.equals(oldItem);
        oldItem = newItem;
    
        if(!same)
        {
            imageCanvas = new ImageCanvas(m_fileDirectory+newItem.toString()+".png");
            imageCanvas.addMouseListener(this);
            imageCanvas.addMouseMotionListener(this);
            jScrollPane1.setViewportView(imageCanvas);
            //canvasLocation = new Point(0,0);
        }   
    }
    
    public void mouseClicked(MouseEvent e)
    {
        Dimension dim=imageCanvas.getSize();

        Point coord=e.getPoint();

        //imageCanvas.d
        
        if(e.getButton()==MouseEvent.BUTTON1)
        {
            System.out.println("zoom +");

            dim.height+=50;

            dim.width+=50;
        }
        else if (e.getButton()==MouseEvent.BUTTON3)
        {
            System.out.println("zoom -");

            dim.height-=50;
            dim.width-=50;
        }
        
        imageCanvas.setPreferredSize(dim);
        imageCanvas.setSize(dim);
        
        Dimension scrollPaneDim=getPreferredSize();
        System.out.println("ScrollPane preferred :"+scrollPaneDim.height+" "+scrollPaneDim.width);
        System.out.println("ScrollPane real :"+jScrollPane1.getHeight()+" "+jScrollPane1.getWidth());
        System.out.println("ScrollPane SCROLLBAR :"+jScrollPane1.getHorizontalScrollBar().getHeight()+" "+jScrollPane1.getVerticalScrollBar().getWidth());
        
        
        
        if(e.getButton()==MouseEvent.BUTTON1)
        {
            imageCanvas.setLocation(((jScrollPane1.getWidth()/*+jScrollPane1.getVerticalScrollBar().getWidth()*/)/2)-coord.x-25,((jScrollPane1.getHeight()/*+jScrollPane1.getHorizontalScrollBar().getHeight()*/)/2)-coord.y-25);
        }
        else if (e.getButton()==MouseEvent.BUTTON3)
        {
            imageCanvas.setLocation(((jScrollPane1.getWidth()/*+jScrollPane1.getVerticalScrollBar().getWidth()*/)/2)-coord.x+25,((jScrollPane1.getHeight()/*+jScrollPane1.getHorizontalScrollBar().getHeight()*/)/2)-coord.y+25);
        }
        //imageCanvas.setLocation(imageCanvas.getLocation().x-(coord.x+imageCanvas.getLocation().x-jScrollPane1.getWidth()/2),imageCanvas.getLocation().y-(coord.y+imageCanvas.getLocation().y-jScrollPane1.getHeight()/2));
        //int x=coord.x+((jScrollPane1.getWidth()-jScrollPane1.getVerticalScrollBar().getWidth())/2)+2*imageCanvas.getLocation().x;
        //int y=coord.y+((jScrollPane1.getHeight()-jScrollPane1.getHorizontalScrollBar().getHeight())/2)-2*imageCanvas.getLocation().y;
    
        //int x=coord.x+((jScrollPane1.getWidth()+jScrollPane1.getVerticalScrollBar().getWidth())/2);
        //int y=coord.y+((jScrollPane1.getHeight()+jScrollPane1.getHorizontalScrollBar().getHeight())/2);
        //System.out.println("setLocation canvas x:"+x+" y:"+y)
        //imageCanvas.setLocation(x,-y);
        
        //canvasLocation=imageCanvas.getLocation();
        
        
    }
    
    public void mouseEntered(MouseEvent e) 
    {
        Cursor curs=new Cursor(Cursor.CROSSHAIR_CURSOR);
        setCursor(curs);
    }
    
    public void mouseExited(MouseEvent e) 
    {
        Cursor curs=new Cursor(Cursor.DEFAULT_CURSOR);
        setCursor(curs);
    }
    
    public void mousePressed(MouseEvent e) 
    {
        //System.out.println("press");
        //canvasLocation=new Point(0,0);
    }
    public void mouseReleased(MouseEvent e) 
    {
        //System.out.println("release");        
    }
    
    public void mouseDragged(MouseEvent e) 
    {
        /*
        System.out.println("drag");
        
        if(canvasLocation.equals(new Point(0,0)))
        {
            canvasLocation=e.getPoint();
        }
        imageCanvas.setLocation(canvasLocation.x+e.getPoint().x,canvasLocation.y+e.getPoint().y);
        canvasLocation=new Point(imageCanvas.getLocation().x+e.getPoint().x,imageCanvas.getLocation().y+e.getPoint().y);
        */
    }
    
    public void mouseMoved(MouseEvent e) {}

}